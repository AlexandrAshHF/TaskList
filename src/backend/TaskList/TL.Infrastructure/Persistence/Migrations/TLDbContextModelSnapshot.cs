// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TL.Infrastructure.Persistance.Contexts;

#nullable disable

namespace TL.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TLDbContext))]
    partial class TLDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectsAppStatuses", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationStatusesId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectsId", "ApplicationStatusesId");

                    b.HasIndex("ApplicationStatusesId");

                    b.ToTable("ProjectsAppStatuses");
                });

            modelBuilder.Entity("TL.Core.Entities.Application.EmployeeInApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeesInApplications");
                });

            modelBuilder.Entity("TL.Core.Entities.Application.TLApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("LaborCosts")
                        .HasColumnType("interval");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "TL.Core.Entities.Application.TLApplication.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<List<string>>("Images")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasColumnName("ImageLinks");

                            b1.Property<string>("Marking")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Marking");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("TL.Core.Entities.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Color", "TL.Core.Entities.ApplicationStatus.Color#Color", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Blue")
                                .HasColumnType("integer");

                            b1.Property<int>("Green")
                                .HasColumnType("integer");

                            b1.Property<int>("Red")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("TL.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Content", "TL.Core.Entities.Comment.Content#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<List<string>>("Images")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Marking")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TL.Core.Entities.Empl.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TL.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParrentProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParrentProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectsAppStatuses", b =>
                {
                    b.HasOne("TL.Core.Entities.ApplicationStatus", null)
                        .WithMany()
                        .HasForeignKey("ApplicationStatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TL.Core.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TL.Core.Entities.Application.EmployeeInApplication", b =>
                {
                    b.HasOne("TL.Core.Entities.Application.TLApplication", "Application")
                        .WithMany("Employees")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TL.Core.Entities.Empl.Employee", "Employee")
                        .WithMany("EmployeeInApplications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TL.Core.Entities.Application.TLApplication", b =>
                {
                    b.HasOne("TL.Core.Entities.Project", "Project")
                        .WithMany("Applications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TL.Core.Entities.ApplicationStatus", "Status")
                        .WithMany("Applications")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TL.Core.Entities.Comment", b =>
                {
                    b.HasOne("TL.Core.Entities.Application.TLApplication", "Application")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TL.Core.Entities.Empl.Employee", "Employee")
                        .WithMany("Comments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TL.Core.Entities.Empl.Employee", b =>
                {
                    b.HasOne("TL.Core.Entities.Project", null)
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("TL.Core.Entities.Project", b =>
                {
                    b.HasOne("TL.Core.Entities.Project", "ParrentProject")
                        .WithMany("InternalProjects")
                        .HasForeignKey("ParrentProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParrentProject");
                });

            modelBuilder.Entity("TL.Core.Entities.Application.TLApplication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TL.Core.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("TL.Core.Entities.Empl.Employee", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EmployeeInApplications");
                });

            modelBuilder.Entity("TL.Core.Entities.Project", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Employees");

                    b.Navigation("InternalProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
